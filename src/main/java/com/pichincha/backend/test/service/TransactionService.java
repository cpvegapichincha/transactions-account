package com.pichincha.backend.test.service;

import static com.pichincha.backend.test.Constants.TRANSACTION_NOT_FOUND;
import static org.springframework.http.HttpEntity.EMPTY;
import static org.springframework.http.HttpMethod.GET;

import com.pichincha.backend.test.dto.AccountResponseDto;
import com.pichincha.backend.test.dto.NewTransactionDto;
import com.pichincha.backend.test.dto.TransactionDto;
import com.pichincha.backend.test.dto.rest.TransactionContainer;
import com.pichincha.backend.test.exception.AccountNotFoundException;
import com.pichincha.backend.test.exception.TransactionsNotFoundException;
import com.pichincha.backend.test.iservices.IAccountService;
import com.pichincha.backend.test.iservices.ITransactionService;
import com.pichincha.backend.test.mapper.ServiceMapper;
import com.pichincha.backend.test.model.Account;
import com.pichincha.backend.test.model.Transaction;
import com.pichincha.backend.test.repository.TransactionRepository;
import com.pichincha.backend.test.util.ApiConsumer;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.stereotype.Service;

@Service
public class TransactionService implements ITransactionService {

  @Autowired
  ApiConsumer apiConsumer;
  @Value("${api.url}")
  String url;
  @Autowired
  TransactionRepository repository;
  @Autowired
  ServiceMapper serviceMapper;
  @Autowired
  IAccountService iAccountService;

  //todo: return a list of transactions from database and consume API and return both results in a single entity ordered by creation date descending and separated by type OK
  // extra point if mapping is made with functions (+1) OK
  //todo: https://run.mocky.io/v3/1ac36ba6-9535-484d-93b2-fd6c68044884 API if service does return OK but has no information it just returns an empty list OK
  //todo: is this declared method in the correct class? explain why. OK
  @Override
  public Map<String, List<TransactionDto>> getTransactionsForAccount(UUID accountId) {
    List<TransactionDto> transactions = new ArrayList<>(consumeTransactionApi());
    List<Transaction> databaseTransactions = repository.findByAccountId(accountId);
    transactions.addAll(serviceMapper.toTransactionDtoListFromDatabase(databaseTransactions));
    Map<String, List<TransactionDto>> groupedTransactions = transactions.stream()
        .collect(Collectors.groupingBy(TransactionDto::getType));
    groupedTransactions.entrySet()
        .forEach(stringListEntry -> stringListEntry.setValue(stringListEntry.getValue().stream()
            .sorted(Comparator.comparing(TransactionDto::getCreationDate))
            .collect(Collectors.toList())));
    return groupedTransactions;
  }

  private List<TransactionDto> consumeTransactionApi() {
    TransactionContainer response = apiConsumer.consumeApiRest(url, GET,
        EMPTY, ParameterizedTypeReference.forType(TransactionContainer.class));
    if (response.getStatus().getCode().equals("0")) {
      return serviceMapper.toTransactionDtoList(response.getTransaction());
    }
    return new ArrayList<>();
  }

  //todo: create a new transaction in database with best practices, use custom exceptions to handle errors; return the autogenerated id of the new transaction OK
  //todo: before controller newTransactionDto's fields should be validated OK
  //todo: is this declared method in the correct class? explain why.
  @Override
  public UUID addTransaction(NewTransactionDto newTransactionDto, String accountId) {
    Account account = iAccountService.getDatabaseAccount(UUID.fromString(accountId));
    Transaction newTransaction = serviceMapper.toTransaction(newTransactionDto, account);
    return repository.save(newTransaction).getId();
  }

  //todo: get all transactions between amounts of x and y of a given account; being x and y pathParameters of the API and filter them via repository not by service. OK
  //todo: should amounts type be changed? explain why
  //todo: use custom exceptions to throw errors and not exceptions thrown by java; and handle some of them through try and catch and some of them globally (ExceptionHandler) OK
  //todo: log different kind of levels depending of the information needed (errors, informative, and tracing) the header pass by sleuth should be present in all logs
  //todo: should send an async message to any queue you prefer, this queue must only log the tracing information of the account that is being searched
  //todo: use "mapResponse" of "serviceMapper" in service layer OK
  //todo: create unit and integration tests
  @Override
  public AccountResponseDto getFilteredTransactions(UUID accountId, double minimum,
      double maximum) {
    List<Transaction> transactions = repository
        .findByAccountIdAndAmountBetween(accountId, minimum, maximum);
    if (transactions.isEmpty()) {
      throw new TransactionsNotFoundException(TRANSACTION_NOT_FOUND);
    }
    try {
      return serviceMapper.mapResponse(transactions);
    } catch (AccountNotFoundException exception) {
      //log
      throw new TransactionsNotFoundException(TRANSACTION_NOT_FOUND);
    }
  }
}
