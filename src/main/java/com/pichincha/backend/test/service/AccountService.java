package com.pichincha.backend.test.service;


import static lombok.AccessLevel.PRIVATE;

import com.pichincha.backend.test.dto.AccountDto;
import com.pichincha.backend.test.dto.NewTransactionDto;
import com.pichincha.backend.test.repository.AccountRepository;
import java.util.UUID;
import lombok.experimental.FieldDefaults;
import org.springframework.stereotype.Service;

//todo: modify class to inject dependencies not via constructors
@Service
@FieldDefaults(level = PRIVATE)
public class AccountService {

  final AccountRepository accountRepository;

  public AccountService(AccountRepository repository) {
    this.accountRepository = repository;
  }


  //todo: use single responsibility principle (mappers in different layer) return account with its transactions and handle with API standards when account not found (404 not found)
  public AccountDto getAccount(UUID id) {
    return accountRepository.findById(id)
        .map(account -> new AccountDto(account.getNumber(), account.getType(),
            account.getCreationDate()))
        .orElseThrow(NullPointerException::new);
  }

  //todo: create a new transaction in database, return the autogenerated id of the new transaction (service)
  //todo: before controller newTransactionDto's fields must be validated
  //todo: is this declared method in the correct class? explain why.
  public UUID addTransaction(NewTransactionDto newTransactionDto, String accountId) {
    return null;
  }
}
